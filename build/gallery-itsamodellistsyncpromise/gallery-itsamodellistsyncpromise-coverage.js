if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js']) {
   __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'] = {"path":"build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":44},"end":{"line":1,"column":63}}},"2":{"name":"(anonymous_2)","line":111,"loc":{"start":{"line":111,"column":13},"end":{"line":111,"column":29}}},"3":{"name":"ITSAModellistSyncPromise","line":121,"loc":{"start":{"line":121,"column":4},"end":{"line":121,"column":40}}},"4":{"name":"(anonymous_4)","line":140,"loc":{"start":{"line":140,"column":24},"end":{"line":140,"column":42}}},"5":{"name":"(anonymous_5)","line":145,"loc":{"start":{"line":145,"column":16},"end":{"line":145,"column":32}}},"6":{"name":"(anonymous_6)","line":151,"loc":{"start":{"line":151,"column":16},"end":{"line":151,"column":31}}},"7":{"name":"(anonymous_7)","line":165,"loc":{"start":{"line":165,"column":16},"end":{"line":165,"column":30}}},"8":{"name":"(anonymous_8)","line":197,"loc":{"start":{"line":197,"column":21},"end":{"line":197,"column":40}}},"9":{"name":"(anonymous_9)","line":205,"loc":{"start":{"line":205,"column":33},"end":{"line":205,"column":60}}},"10":{"name":"(anonymous_10)","line":206,"loc":{"start":{"line":206,"column":71},"end":{"line":206,"column":96}}},"11":{"name":"(anonymous_11)","line":260,"loc":{"start":{"line":260,"column":21},"end":{"line":260,"column":39}}},"12":{"name":"(anonymous_12)","line":265,"loc":{"start":{"line":265,"column":16},"end":{"line":265,"column":32}}},"13":{"name":"(anonymous_13)","line":273,"loc":{"start":{"line":273,"column":16},"end":{"line":273,"column":31}}},"14":{"name":"(anonymous_14)","line":287,"loc":{"start":{"line":287,"column":16},"end":{"line":287,"column":30}}},"15":{"name":"(anonymous_15)","line":316,"loc":{"start":{"line":316,"column":23},"end":{"line":316,"column":41}}},"16":{"name":"(anonymous_16)","line":321,"loc":{"start":{"line":321,"column":16},"end":{"line":321,"column":32}}},"17":{"name":"(anonymous_17)","line":327,"loc":{"start":{"line":327,"column":16},"end":{"line":327,"column":31}}},"18":{"name":"(anonymous_18)","line":341,"loc":{"start":{"line":341,"column":16},"end":{"line":341,"column":30}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":371,"column":3}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":13}},"3":{"start":{"line":57,"column":4},"end":{"line":117,"column":6}},"4":{"start":{"line":112,"column":8},"end":{"line":112,"column":19}},"5":{"start":{"line":113,"column":8},"end":{"line":115,"column":23}},"6":{"start":{"line":114,"column":12},"end":{"line":114,"column":41}},"7":{"start":{"line":116,"column":8},"end":{"line":116,"column":22}},"8":{"start":{"line":121,"column":4},"end":{"line":121,"column":42}},"9":{"start":{"line":122,"column":4},"end":{"line":353,"column":13}},"10":{"start":{"line":141,"column":12},"end":{"line":142,"column":35}},"11":{"start":{"line":144,"column":12},"end":{"line":148,"column":14}},"12":{"start":{"line":146,"column":20},"end":{"line":146,"column":68}},"13":{"start":{"line":149,"column":12},"end":{"line":174,"column":14}},"14":{"start":{"line":152,"column":20},"end":{"line":155,"column":22}},"15":{"start":{"line":157,"column":20},"end":{"line":161,"column":21}},"16":{"start":{"line":158,"column":24},"end":{"line":160,"column":27}},"17":{"start":{"line":162,"column":20},"end":{"line":162,"column":55}},"18":{"start":{"line":163,"column":20},"end":{"line":163,"column":32}},"19":{"start":{"line":166,"column":20},"end":{"line":170,"column":22}},"20":{"start":{"line":171,"column":20},"end":{"line":171,"column":53}},"21":{"start":{"line":172,"column":20},"end":{"line":172,"column":31}},"22":{"start":{"line":198,"column":12},"end":{"line":199,"column":50}},"23":{"start":{"line":201,"column":12},"end":{"line":201,"column":36}},"24":{"start":{"line":202,"column":12},"end":{"line":202,"column":43}},"25":{"start":{"line":203,"column":12},"end":{"line":203,"column":77}},"26":{"start":{"line":204,"column":12},"end":{"line":204,"column":59}},"27":{"start":{"line":205,"column":12},"end":{"line":236,"column":15}},"28":{"start":{"line":206,"column":16},"end":{"line":235,"column":19}},"29":{"start":{"line":207,"column":20},"end":{"line":211,"column":26}},"30":{"start":{"line":212,"column":20},"end":{"line":234,"column":21}},"31":{"start":{"line":213,"column":24},"end":{"line":213,"column":43}},"32":{"start":{"line":214,"column":24},"end":{"line":214,"column":70}},"33":{"start":{"line":215,"column":24},"end":{"line":215,"column":57}},"34":{"start":{"line":216,"column":24},"end":{"line":216,"column":47}},"35":{"start":{"line":220,"column":24},"end":{"line":224,"column":25}},"36":{"start":{"line":221,"column":28},"end":{"line":223,"column":31}},"37":{"start":{"line":225,"column":24},"end":{"line":225,"column":66}},"38":{"start":{"line":226,"column":24},"end":{"line":231,"column":25}},"39":{"start":{"line":227,"column":28},"end":{"line":227,"column":58}},"40":{"start":{"line":230,"column":28},"end":{"line":230,"column":60}},"41":{"start":{"line":232,"column":24},"end":{"line":232,"column":57}},"42":{"start":{"line":233,"column":24},"end":{"line":233,"column":51}},"43":{"start":{"line":261,"column":12},"end":{"line":262,"column":32}},"44":{"start":{"line":264,"column":12},"end":{"line":270,"column":14}},"45":{"start":{"line":266,"column":20},"end":{"line":268,"column":21}},"46":{"start":{"line":267,"column":24},"end":{"line":267,"column":66}},"47":{"start":{"line":271,"column":12},"end":{"line":296,"column":14}},"48":{"start":{"line":274,"column":20},"end":{"line":277,"column":22}},"49":{"start":{"line":279,"column":20},"end":{"line":283,"column":21}},"50":{"start":{"line":280,"column":24},"end":{"line":282,"column":27}},"51":{"start":{"line":284,"column":20},"end":{"line":284,"column":52}},"52":{"start":{"line":285,"column":20},"end":{"line":285,"column":32}},"53":{"start":{"line":288,"column":20},"end":{"line":292,"column":22}},"54":{"start":{"line":293,"column":20},"end":{"line":293,"column":53}},"55":{"start":{"line":294,"column":20},"end":{"line":294,"column":31}},"56":{"start":{"line":317,"column":12},"end":{"line":318,"column":34}},"57":{"start":{"line":320,"column":12},"end":{"line":324,"column":14}},"58":{"start":{"line":322,"column":20},"end":{"line":322,"column":66}},"59":{"start":{"line":325,"column":12},"end":{"line":350,"column":14}},"60":{"start":{"line":328,"column":20},"end":{"line":331,"column":22}},"61":{"start":{"line":333,"column":20},"end":{"line":337,"column":21}},"62":{"start":{"line":334,"column":24},"end":{"line":336,"column":27}},"63":{"start":{"line":338,"column":20},"end":{"line":338,"column":54}},"64":{"start":{"line":339,"column":20},"end":{"line":339,"column":32}},"65":{"start":{"line":342,"column":20},"end":{"line":346,"column":22}},"66":{"start":{"line":347,"column":20},"end":{"line":347,"column":53}},"67":{"start":{"line":348,"column":20},"end":{"line":348,"column":31}},"68":{"start":{"line":355,"column":4},"end":{"line":355,"column":58}},"69":{"start":{"line":357,"column":4},"end":{"line":357,"column":56}}},"branchMap":{"1":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":20},"end":{"line":157,"column":20}},{"start":{"line":157,"column":20},"end":{"line":157,"column":20}}]},"2":{"line":201,"type":"binary-expr","locations":[{"start":{"line":201,"column":22},"end":{"line":201,"column":29}},{"start":{"line":201,"column":33},"end":{"line":201,"column":35}}]},"3":{"line":203,"type":"binary-expr","locations":[{"start":{"line":203,"column":23},"end":{"line":203,"column":57}},{"start":{"line":203,"column":62},"end":{"line":203,"column":75}}]},"4":{"line":204,"type":"cond-expr","locations":[{"start":{"line":204,"column":33},"end":{"line":204,"column":47}},{"start":{"line":204,"column":50},"end":{"line":204,"column":58}}]},"5":{"line":206,"type":"cond-expr","locations":[{"start":{"line":206,"column":39},"end":{"line":206,"column":51}},{"start":{"line":206,"column":54},"end":{"line":206,"column":60}}]},"6":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":20},"end":{"line":212,"column":20}},{"start":{"line":212,"column":20},"end":{"line":212,"column":20}}]},"7":{"line":214,"type":"cond-expr","locations":[{"start":{"line":214,"column":48},"end":{"line":214,"column":60}},{"start":{"line":214,"column":63},"end":{"line":214,"column":69}}]},"8":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":24},"end":{"line":220,"column":24}},{"start":{"line":220,"column":24},"end":{"line":220,"column":24}}]},"9":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":24},"end":{"line":226,"column":24}},{"start":{"line":226,"column":24},"end":{"line":226,"column":24}}]},"10":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":20},"end":{"line":266,"column":20}},{"start":{"line":266,"column":20},"end":{"line":266,"column":20}}]},"11":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":20},"end":{"line":279,"column":20}},{"start":{"line":279,"column":20},"end":{"line":279,"column":20}}]},"12":{"line":333,"type":"if","locations":[{"start":{"line":333,"column":20},"end":{"line":333,"column":20}},{"start":{"line":333,"column":20},"end":{"line":333,"column":20}}]}},"code":["(function () { YUI.add('gallery-itsamodellistsyncpromise', function (Y, NAME) {","","'use strict';","","/**"," *"," * Extention ITSAModellistSyncPromise"," *"," *"," * Extends Y.ModelList with Promised sync-methods. The ModelList's synclayer can be made just as usual, defining these actions:"," * <br /><br />"," * 'create'"," * 'destroy'"," * 'read'"," * 'readappend'"," * 'save'"," * 'submit'"," * 'update'"," * <br /><br />"," * Instead of calling ModelList.load() you should use:"," * <br />"," * <b>ModelList.loadPromise(options)</b> --> to append the read-models --> options = {append: true};"," * <br /><br />"," * Also, there are 3 extra Promises, which -in this current version- <b>all depends</b> on the Model's synclayer, not ModelLists synclayer:"," * <br />"," * <b>ModelList.destroyPromise()</b><br />"," * <b>ModelList.savePromise()</b><br />"," * <b>ModelList.submitPromise()</b>"," *"," * @module gallery-itsamodelsyncpromise"," * @class ITSAModellistSyncPromise"," * @constructor"," * @since 0.1"," *"," * <i>Copyright (c) 2013 Marco Asbreuk - http://itsasbreuk.nl</i>"," * YUI BSD License - http://developer.yahoo.com/yui/license.html"," *","*/","","   /**","     * Fired when an error occurs, such as when an attribute (or property) doesn't validate or when","     * the sync layer submit-function returns an error.","     * @event error","     * @param e {EventFacade} Event Facade including:","     * @param e.error {any} Error message.","     * @param e.src {String} Source of the error. May be one of the following (or any","     *                     custom error source defined by a Model subclass):","     *","     * `submit`: An error submitting the model from within a sync layer.","     *","     * `attributevalidation`: An error validating an attribute (or property). The attribute (or objectproperty)","     *                        that failed validation will be provided as the `attribute` property on the event facade.","     *","     * @param e.attribute {String} The attribute/property that failed validation.","     * @param e.validationerror {String} The errormessage in case of attribute-validation error.","    **/","    var EVT_ERROR = 'error',","","    /**","     * Fired after all changed models of the modellist is saved through the Model-sync layer.","     * @event save","     * @param e {EventFacade} Event Facade including:","     * @param [e.options] {Object} The options=object that was passed to the sync-layer, if there was one.","     * @param [e.parsed] {Object} The parsed version of the sync layer's response to the submit-request, if there was a response.","     * @param [e.response] {any} The sync layer's raw, unparsed response to the submit-request, if there was one.","     * @since 0.1","    **/","    EVT_SAVE = 'save',","","   /**","     * Fired after models are submitted through the Model-sync layer.","     * @event submit","     * @param e {EventFacade} Event Facade including:","     * @param [e.options] {Object} The options=object that was passed to the sync-layer, if there was one.","     * @param [e.parsed] {Object} The parsed version of the sync layer's response to the submit-request, if there was a response.","     * @param [e.response] {any} The sync layer's raw, unparsed response to the submit-request, if there was one.","     * @since 0.1","    **/","    EVT_SUBMIT = 'submit',","","   /**","     * Fired after models are appended to the ModelList by the ModelList-sync layer.","     * @event loadappend","     * @param e {EventFacade} Event Facade including:","     * @param [e.options] {Object} The options=object that was passed to the sync-layer, if there was one.","     * @param [e.response] {any} The sync layer's raw, unparsed response to the submit-request, if there was one.","     * @since 0.1","    **/","    EVT_LOADAPPEND = 'loadappend',","","   /**","     * Fired after models are read from the ModelList-sync layer.","     * @event load","     * @param e {EventFacade} Event Facade including:","     * @param [e.options] {Object} The options=object that was passed to the sync-layer, if there was one.","     * @param [e.response] {any} The sync layer's raw, unparsed response to the submit-request, if there was one.","     * @since 0.1","    **/","    EVT_LOAD = 'load',","","   /**","     * Fired after models are destroyed from the ModelList-sync layer.","     * @event destroy","     * @param e {EventFacade} Event Facade including:","     * @param [e.options] {Object} The options=object that was passed to the sync-layer, if there was one.","     * @param [e.response] {any} The sync layer's raw, unparsed response to the submit-request, if there was one.","     * @since 0.1","    **/","    EVT_DESTROY = 'destroy',","","    PARSED = function(value) {","        var parsed;","        try {","            parsed = Y.JSON.parse(value);","        } catch (ex) {}","        return parsed;","    };","","// -- Mixing extra Methods to Y.ModelList -----------------------------------","","    function ITSAModellistSyncPromise() {}","    Y.mix(ITSAModellistSyncPromise.prototype, {","","       /**","        * Destroys all models within this modellist.","        * <b>Caution:</b> The current version uses the Model's synclayer, NOT ModelList's synclayer.","        *","        * This method delegates to the Model's`sync()` method to perform the actual destroy","        * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to","         * make the promise work.","        *","        * A successful destroy operation will fire a `destroy` event, while an unsuccessful","        * save operation will fire an `error` event with the `src` value \"destroy\".","        *","        * @method destroyPromise","         * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync","         *                 implementation to determine what options it supports or requires, if any.","         * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","        **/","        destroyPromise: function(options) {","            var instance = this,","                  destroylist = [];","","            instance.each(","                function(model) {","                    destroylist.push(model.destroyPromise(options));","                }","            );","            return Y.batch.apply(Y, destroylist).then(","//            return Y.Promise.every(destroylist).then(","                function(data) {","                    var facade = {","                        options : options,","                        src : 'destroy'","                    };","                    // Lazy publish.","                    if (!instance._destroyEvent) {","                        instance._destroyEvent = instance.publish(EVT_DESTROY, {","                            preventable: false","                        });","                    }","                    instance.fire(EVT_DESTROY, facade);","                    return data;","                },","                function(err) {","                    var facade = {","                        options : options,","                        src : 'destroy',","                        error: err","                    };","                    instance.fire(EVT_ERROR, facade);","                    return err;","                }","            );","        },","","        /**","         * Loads models from the server and adds them into the ModelList.","         *","         * This method delegates to the `sync()` method, by either using the 'read' or 'readappend' action, depending","         * on the value of parameter options.append.","         * This is an asynchronous action. You <b>must</b> specify a _callback_ function to","         * make the promise work.","         *","         * A successful load operation will fire a `load` event, while an unsuccessful","         * load operation will fire an `error` event with the `src` value \"load\".","         *","         * If the load operation succeeds and one or more of the loaded attributes","         * differ from this model's current attributes, a `change` event will be fired for every Model.","         *","         * @method loadPromise","         * @param {Object} [options] Options to be passed to `sync()`. The custom sync","         *                 implementation can determine what options it supports or requires, if any.","         * @param {Boolean} [options.append] Set true if you want to append items.","         * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","        **/","        loadPromise: function (options) {","            var instance = this,","                 optionsappend, append, eventname;","","            options = options || {};","            optionsappend = options.append;","            append = ((typeof optionsappend === 'boolean') && optionsappend);","            eventname = append ? EVT_LOADAPPEND : EVT_LOAD;","            return new Y.Promise(function (resolve, reject) {","                instance.sync(append ? 'readappend' : 'read', options, function (err, response) {","                    var parsed,","                        facade = {","                            options : options,","                            response: response","                        };","                    if (err) {","                        facade.error = err;","                        facade.src   = append ? 'loadappend' : 'load';","                        instance.fire(EVT_ERROR, facade);","                        reject(new Error(err));","                    }","                    else {","                        // Lazy publish.","                        if (!instance['_'+eventname]) {","                            instance['_'+eventname] = instance.publish(eventname, {","                                preventable: false","                            });","                        }","                        parsed = facade.parsed = PARSED(response);","                        if (append) {","                            instance.add(parsed, options);","                        }","                        else {","                            instance.reset(parsed, options);","                        }","                        instance.fire(eventname, facade);","                        resolve(response, options);","                    }","                });","            });","        },","","       /**","        * Saves all modified models within this modellist to the server.","        * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer.","        * Therefore, you get multiple requests for all modified Models.","        *","        * This method delegates to the Model's`sync()` method to perform the actual save","        * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to","         * make the promise work.","        *","        * A successful save operation will fire a `save` event, while an unsuccessful","        * save operation will fire an `error` event with the `src` value \"save\".","        *","        * If the save operation succeeds and one or more of the attributes returned in","        * the server's response differ from this model's current attributes, a","        * `change` event will be fired.","        *","        * @method savePromise","         * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync","         *                 implementation to determine what options it supports or requires, if any.","         * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","        **/","        savePromise: function(options) {","            var instance = this,","                  savelist = [];","","            instance.each(","                function(model) {","                    if (model.isModified()) {","                        savelist.push(model.savePromise(options));","                    }","                }","            );","            return Y.batch.apply(Y, savelist).then(","//            return Y.Promise.every(savelist).then(","                function(data) {","                    var facade = {","                        options : options,","                        src : 'save'","                    };","                    // Lazy publish.","                    if (!instance._saveEvent) {","                        instance._saveEvent = instance.publish(EVT_SAVE, {","                            preventable: false","                        });","                    }","                    instance.fire(EVT_SAVE, facade);","                    return data;","                },","                function(err) {","                    var facade = {","                        options : options,","                        src : 'save',","                        error: err","                    };","                    instance.fire(EVT_ERROR, facade);","                    return err;","                }","            );","        },","","       /**","        * Submits all models within this modellist to the server.","        * <b>Caution:</b> within the current version the Model's synclayer is used, NOT ModelList's synclayer.","        * Therefore, you get multiple requests for all Models.","        *","        * This method delegates to the Model's`sync()` method to perform the actual submit","        * operation, which is an asynchronous action. Within the Y.Model-class, you <b>must</b> specify a _callback_ function to","         * make the promise work.","        *","        * A successful save operation will fire a `submit` event, while an unsuccessful","        * save operation will fire an `error` event with the `src` value \"submit\".","        *","        * @method submitPromise","         * @param {Object} [options] Options to be passed to all Model's`sync()`. It's up to the custom sync","         *                 implementation to determine what options it supports or requires, if any.","         * @return {Y.Promise} promised response --> resolve(response, options) OR reject(reason).","        **/","        submitPromise: function(options) {","            var instance = this,","                  submitlist = [];","","            instance.each(","                function(model) {","                    submitlist.push(model.submitPromise(options));","                }","            );","            return Y.batch.apply(Y, submitlist).then(","//            return Y.Promise.every(submitlist).then(","                function(data) {","                    var facade = {","                        options : options,","                        src : 'submit'","                    };","                    // Lazy publish.","                    if (!instance._submitEvent) {","                        instance._submitEvent = instance.publish(EVT_SUBMIT, {","                            preventable: false","                        });","                    }","                    instance.fire(EVT_SUBMIT, facade);","                    return data;","                },","                function(err) {","                    var facade = {","                        options : options,","                        src : 'submit',","                        error: err","                    };","                    instance.fire(EVT_ERROR, facade);","                    return err;","                }","            );","        }","","    }, true);","","    Y.ITSAModellistSyncPromise = ITSAModellistSyncPromise;","","    Y.Base.mix(Y.ModelList, [ITSAModellistSyncPromise]);","","}, 'gallery-2013.05.29-23-38', {","    \"requires\": [","        \"yui-base\",","        \"base-base\",","        \"base-build\",","        \"node-base\",","        \"json-parse\",","        \"promise\",","        \"model\",","        \"model-list\",","        \"gallery-itsamodelsyncpromise\"","    ]","});","","}());"]};
}
var __cov_3GKoR$ZYrmGv8l73dddnpQ = __coverage__['build/gallery-itsamodellistsyncpromise/gallery-itsamodellistsyncpromise.js'];
__cov_3GKoR$ZYrmGv8l73dddnpQ.s['1']++;YUI.add('gallery-itsamodellistsyncpromise',function(Y,NAME){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['1']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['2']++;'use strict';__cov_3GKoR$ZYrmGv8l73dddnpQ.s['3']++;var EVT_ERROR='error',EVT_SAVE='save',EVT_SUBMIT='submit',EVT_LOADAPPEND='loadappend',EVT_LOAD='load',EVT_DESTROY='destroy',PARSED=function(value){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['2']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['4']++;var parsed;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['5']++;try{__cov_3GKoR$ZYrmGv8l73dddnpQ.s['6']++;parsed=Y.JSON.parse(value);}catch(ex){}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['7']++;return parsed;};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['8']++;function ITSAModellistSyncPromise(){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['3']++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['9']++;Y.mix(ITSAModellistSyncPromise.prototype,{destroyPromise:function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['4']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['10']++;var instance=this,destroylist=[];__cov_3GKoR$ZYrmGv8l73dddnpQ.s['11']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['5']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['12']++;destroylist.push(model.destroyPromise(options));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['13']++;return Y.batch.apply(Y,destroylist).then(function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['6']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['14']++;var facade={options:options,src:'destroy'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['15']++;if(!instance._destroyEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['16']++;instance._destroyEvent=instance.publish(EVT_DESTROY,{preventable:false});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['1'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['17']++;instance.fire(EVT_DESTROY,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['18']++;return data;},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['7']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['19']++;var facade={options:options,src:'destroy',error:err};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['20']++;instance.fire(EVT_ERROR,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['21']++;return err;});},loadPromise:function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['8']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['22']++;var instance=this,optionsappend,append,eventname;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['23']++;options=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][0]++,options)||(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['2'][1]++,{});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['24']++;optionsappend=options.append;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['25']++;append=(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][0]++,typeof optionsappend==='boolean')&&(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['3'][1]++,optionsappend);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['26']++;eventname=append?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][0]++,EVT_LOADAPPEND):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['4'][1]++,EVT_LOAD);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['27']++;return new Y.Promise(function(resolve,reject){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['9']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['28']++;instance.sync(append?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][0]++,'readappend'):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['5'][1]++,'read'),options,function(err,response){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['10']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['29']++;var parsed,facade={options:options,response:response};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['30']++;if(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['31']++;facade.error=err;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['32']++;facade.src=append?(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][0]++,'loadappend'):(__cov_3GKoR$ZYrmGv8l73dddnpQ.b['7'][1]++,'load');__cov_3GKoR$ZYrmGv8l73dddnpQ.s['33']++;instance.fire(EVT_ERROR,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['34']++;reject(new Error(err));}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['6'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['35']++;if(!instance['_'+eventname]){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['36']++;instance['_'+eventname]=instance.publish(eventname,{preventable:false});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['8'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['37']++;parsed=facade.parsed=PARSED(response);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['38']++;if(append){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['39']++;instance.add(parsed,options);}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['9'][1]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['40']++;instance.reset(parsed,options);}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['41']++;instance.fire(eventname,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['42']++;resolve(response,options);}});});},savePromise:function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['11']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['43']++;var instance=this,savelist=[];__cov_3GKoR$ZYrmGv8l73dddnpQ.s['44']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['12']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['45']++;if(model.isModified()){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['46']++;savelist.push(model.savePromise(options));}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['10'][1]++;}});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['47']++;return Y.batch.apply(Y,savelist).then(function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['13']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['48']++;var facade={options:options,src:'save'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['49']++;if(!instance._saveEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['50']++;instance._saveEvent=instance.publish(EVT_SAVE,{preventable:false});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['11'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['51']++;instance.fire(EVT_SAVE,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['52']++;return data;},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['14']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['53']++;var facade={options:options,src:'save',error:err};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['54']++;instance.fire(EVT_ERROR,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['55']++;return err;});},submitPromise:function(options){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['15']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['56']++;var instance=this,submitlist=[];__cov_3GKoR$ZYrmGv8l73dddnpQ.s['57']++;instance.each(function(model){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['16']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['58']++;submitlist.push(model.submitPromise(options));});__cov_3GKoR$ZYrmGv8l73dddnpQ.s['59']++;return Y.batch.apply(Y,submitlist).then(function(data){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['17']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['60']++;var facade={options:options,src:'submit'};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['61']++;if(!instance._submitEvent){__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][0]++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['62']++;instance._submitEvent=instance.publish(EVT_SUBMIT,{preventable:false});}else{__cov_3GKoR$ZYrmGv8l73dddnpQ.b['12'][1]++;}__cov_3GKoR$ZYrmGv8l73dddnpQ.s['63']++;instance.fire(EVT_SUBMIT,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['64']++;return data;},function(err){__cov_3GKoR$ZYrmGv8l73dddnpQ.f['18']++;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['65']++;var facade={options:options,src:'submit',error:err};__cov_3GKoR$ZYrmGv8l73dddnpQ.s['66']++;instance.fire(EVT_ERROR,facade);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['67']++;return err;});}},true);__cov_3GKoR$ZYrmGv8l73dddnpQ.s['68']++;Y.ITSAModellistSyncPromise=ITSAModellistSyncPromise;__cov_3GKoR$ZYrmGv8l73dddnpQ.s['69']++;Y.Base.mix(Y.ModelList,[ITSAModellistSyncPromise]);},'gallery-2013.05.29-23-38',{'requires':['yui-base','base-base','base-build','node-base','json-parse','promise','model','model-list','gallery-itsamodelsyncpromise']});
